package com.hariyali.hariyali_project.serviceImpl;

import java.security.Principal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hariyali.hariyali_project.Constants;
import com.hariyali.hariyali_project.confing.CustomUserDetailService;
import com.hariyali.hariyali_project.confing.JwtHelper;
import com.hariyali.hariyali_project.dao.UsersRepository;
import com.hariyali.hariyali_project.dto.JwtResponse;
import com.hariyali.hariyali_project.dto.UsersRequest;
import com.hariyali.hariyali_project.entity.UserType;
import com.hariyali.hariyali_project.entity.Users;
import com.hariyali.hariyali_project.service.UsersService;
import com.hariyali.hariyali_project.utils.EmailService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.persistence.EntityManager;
import jakarta.servlet.http.HttpServletRequest;
import org.hibernate.Filter;
import org.hibernate.Session;
@Service
public class UsersServiceImpl implements UsersService {

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private UsersRepository userRepo;

	@Autowired
	private EntityManager entityManager;

	
	@Autowired
	private JwtHelper jwtHelper;

	@Autowired
	private EmailService emailService;
	
	@Autowired
	private CustomUserDetailService customUserDetailService;
	
	private static final Logger logger = LoggerFactory.getLogger(UsersServiceImpl.class);
	
	// get all users
	@Override
	public Map<String, Object> getUsers(int pageNo, int pageSize) {
//				List<Users> users = new ArrayList<>();
//				Session session = entityManager.unwrap(Session.class);
//				Filter filter = session.enableFilter("deletedUserFilter");
//				filter.setParameter("isDeleted", false);

		Pageable paging = PageRequest.of(pageNo - 1, pageSize);
		Page<Users> userMasters = userRepo.findAllByOrderByUserIdDesc(paging);

		Map<String, Object> response = new HashMap<>();
		response.put("users", userMasters.getContent());
		response.put("currentPage", userMasters.getNumber());
		response.put("totalItems", userMasters.getTotalElements());
		response.put("totalPages", userMasters.getTotalPages());
//				session.disableFilter("deletedUserFilter");
		if (userMasters.hasContent()) {
			return response;
		} else {
			return null;
		}
	}

	//Get By Donor_id
		public Users getByDonorId(String donorId) {

			Users userMaster = new Users();
			Session session = entityManager.unwrap(Session.class);
			Filter filter = session.enableFilter("deletedUserFilter");
			filter.setParameter("isDeleted", false);

			userMaster = this.userRepo.findByDonorID(donorId);

			session.disableFilter("deletedUserFilter");
			return userMaster;

		}
		
	// get user by user-name

	public Users getByUserEmail(String email) {

		Users userMaster = new Users();
		Session session = entityManager.unwrap(Session.class);
		Filter filter = session.enableFilter("deletedUserFilter");
		filter.setParameter("isDeleted", false);

		userMaster = this.userRepo.findByUserEmail(email);

		session.disableFilter("deletedUserFilter");
		return userMaster;

	}

	// get user by user-code
	@Override
	public Users getByUserCode(String username) {

		Users userMaster = new Users();
		Session session = entityManager.unwrap(Session.class);
		Filter filter = session.enableFilter("deletedUserFilter");
		filter.setParameter("isDeleted", false);

		userMaster = this.userRepo.findByUserCode(username);

		session.disableFilter("deletedUserFilter");
		return userMaster;

	}
	
	


	// save user
	@Override
	public JwtResponse<Users> saveUser(UsersRequest jwt,HttpServletRequest request) {
		Random r = new Random();
		int random = r.nextInt(999)+10;
		String donor=Integer.toString(random);
		
		logger.info("addUser method called successfully");
		JwtResponse<Users> response = new JwtResponse<>();
//		String token = request.getHeader("Authorization");
//		String userCode = jwtHelper.getUsernameFromToken(token.substring(7));
//		
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		
//		if (userRepo.existsByuserName(jwt.getUserName())) {
//			throw new ResponseStatusException(HttpStatus.CONFLICT, "User name is already taken!");
//		}

		Users savedUser = mapper.convertValue(jwt,Users.class);
		UserType role = new UserType();
		role.setUsertypeId(jwt.getRoleId());
		role.setUsertypeName(role.getUsertypeName());
		savedUser.setUserRole(role);
		
		savedUser.setUserPassword(passwordEncoder.encode(jwt.getUserPassword()));
		
		System.err.println(passwordEncoder.encode(jwt.getUserPassword()));
		savedUser.setAttempts(0);
		savedUser.setCreatedAt(new Date());
		savedUser.setDonorID(Constants.donorId+""+savedUser.getUserCode()+""+donor);
		savedUser.setUserAddress(jwt.getUserAddress());
		userRepo.save(savedUser);
		
		response.setMessage("User Added Successfully");
		sendEmailDonorId(savedUser.getUserEmail());
		response.setStatus("Success");
		response.setStatusCode(HttpStatus.CREATED);
		response.setResult(savedUser);
		logger.info("addUser method executed successfully");
		
		return response;

	}

	// update user
	public JwtResponse<Users> updateUser(String donorId, UsersRequest user, HttpServletRequest request) {
		JwtResponse<Users> response = new JwtResponse<>();
		String token = request.getHeader("Authorization");
		String userCd = jwtHelper.getUsernameFromToken(token.substring(7));
		Users userResponse = this.userRepo.findByDonorID(donorId);
		if (userResponse != null) {
			userResponse.setUserName(user.getUserName());
			userResponse.setFirstName(user.getFirstName());
			userResponse.setLastName(user.getLastName());
			userResponse.setUserCode(user.getUserCode());
			userResponse.setUserCompanyName(user.getUserCompanyName());
			userResponse.setUserDesignation(user.getUserDesignation());
			userResponse.setUserPhone(user.getUserPhone());
			userResponse.setUserEmail(user.getUserEmail());
			userResponse.setUserAddress(user.getUserAddress());
			userResponse.setUserStatus(user.getUserStatus());
			userResponse.setUserPassword(passwordEncoder.encode(user.getUserPassword()));
			userResponse.setAttempts(0);
			
			userResponse.setUpdatedAt(new Date());
			userResponse.setUpdatedBy(userCd);
			UserType userTypeResponse = new UserType();
			userTypeResponse.setUsertypeId(user.getRoleId());
			
		userResponse.setUserRole(userTypeResponse);

			this.userRepo.save(userResponse);
			response.setMessage("User Has Been Updated Successfully");
			response.setResult(userResponse);
			response.setStatus("SUCCESS");
			response.setStatusCode(HttpStatus.OK);
			return response;
		} 
			response.setMessage("User Not Found With users code " + donorId);
			response.setStatus("ERROR");
			response.setStatusCode(HttpStatus.NOT_FOUND);
			return response;
		

	}

	// delete user by user-code
	@Override
	public JwtResponse<Users> deleteUserByCode(String userEmail) {
		JwtResponse<Users> response = new JwtResponse<>();
		Users userResponse = this.userRepo.findByUserEmail(userEmail);
		if (userResponse != null) {
			userResponse.setIsDeleted(true);
			this.userRepo.save(userResponse);
			response.setMessage("User Has Been Deleted Successfully");
			response.setResult(userResponse);
			response.setStatus("SUCCESS");
			response.setStatusCode(HttpStatus.OK);
			return response;
		}
		response.setMessage("User Not Found With user email" + userEmail);
		response.setStatus("ERROR");
		response.setStatusCode(HttpStatus.NOT_FOUND);
		return response;
	}
	
	
	// delete user by donorId
		@Override
		public JwtResponse<Users> deleteUserByDonorId(String donorId) {
			JwtResponse<Users> response = new JwtResponse<>();
			Users userResponse = this.userRepo.findByUserEmail(donorId);
			if (userResponse != null) {
				userResponse.setIsDeleted(true);
				this.userRepo.save(userResponse);
				response.setMessage("User Has Been Deleted Successfully");
				response.setResult(userResponse);
				response.setStatus("SUCCESS");
				response.setStatusCode(HttpStatus.OK);
				return response;
			}
			response.setMessage("User Not Found With user name" + donorId);
			response.setStatus("ERROR");
			response.setStatusCode(HttpStatus.NOT_FOUND);
			return response;
		}
	
	
	public JwtResponse<String> sendEmailDonorId(String email) {
		JwtResponse<String> res = new JwtResponse<String>();
		Optional<Users> userOptional = Optional.ofNullable(this.userRepo.findByUserEmail(email));
		if (!userOptional.isPresent()) {
			res.setStatus("Error");
			res.setMessage("Invalid User Name");
			res.setStatusCode(HttpStatus.BAD_REQUEST);
			return res;
		}
		Users user = userOptional.get();
		Users userResponse = this.userRepo.findByUserEmail(email);
		
		UserDetails userDetails = this.customUserDetailService.loadUserByUsername(user.getDonorID());
		String token = this.jwtHelper.generateToken(userDetails);
		String subject = "Donor Id";
		String content = "Dear Sir/Madam,\n \tThank you for regestering into the hariyal application. Your donor Id is generated successfully.\n Now you can login by your Donor Id"
				+ "\n Donor ID :"+userResponse.getDonorID()+"\n";
						emailService.sendSimpleEmail(email, subject, content);
	
		
		res.setStatus("Sucess");
		res.setMessage("Mail has been sent successfully ");

		res.setStatusCode(HttpStatus.OK);
		return res;
	}

	//shows currently logged In user
	

	public String getCurrentUser()
	{
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (!(authentication instanceof AnonymousAuthenticationToken)) {
		    String currentUserName = authentication.getName();
		    return currentUserName;
		}else{
		    throw new RuntimeException("No User");
		}	
	}

	@Override
	public Users getCurrentlyLoggedInUser(Principal principal) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public JwtResponse<String> updateUserForactivation(String userName) {
		// TODO Auto-generated method stub
		JwtResponse<String> res = new JwtResponse<String>();

		
		JwtResponse<String> response = new JwtResponse<>();
		Users userResponse = this.userRepo.findByUserEmail(userName);
		if (userResponse != null) {
			
			userResponse.setUserStatus("Active");
			userResponse.setIsDeleted(false);
			userResponse.setUpdatedAt(new Date());
			
			this.userRepo.save(userResponse);
			response.setMessage("Your Account is Activated successfully ");
			response.setStatus("SUCCESS");
			response.setStatusCode(HttpStatus.OK);
			return response;
		} 
			response.setMessage("User Not Found With this Email Id " + userName);
			response.setStatus("ERROR");
			response.setStatusCode(HttpStatus.NOT_FOUND);
			return response;
		


	}

	@Override
	public Users getUserProfile() {
		
	}

	
	
	
}
